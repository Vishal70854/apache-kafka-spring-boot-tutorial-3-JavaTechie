package com.javatechie;

import com.javatechie.dto.Customer;
import com.javatechie.service.KafkaMessagePublisher;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.testcontainers.containers.KafkaContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;
import org.testcontainers.utility.DockerImageName;

import java.time.Duration;
import java.util.concurrent.TimeUnit;

import static org.awaitility.Awaitility.await;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) // run this Test application in random port everytime spring boot application starts
@Testcontainers // by using @Testcontainers annotation we are telling spring boot application that the below class is using some container
class KafkaProducerExampleApplicationTests {
    // we are telling kafka container to provide latest version of kafka from the container
    @Container  // specifies that below kafka variable is a container which holds kafka container object
    static KafkaContainer kafka = new KafkaContainer(DockerImageName.parse("confluentinc/cp-kafka:latest"));

    // configure the bootstrap server for kafka container
    @DynamicPropertySource  // whenever we use test container we need to use this types of annotations. dont need to remember as of now
    public static void initKafkaProperties(DynamicPropertyRegistry registry){

        registry.add("spring.kafka.bootstrap-servers",kafka::getBootstrapServers); // get the bootstrap server for kafka from above kafka container
    }

    // inject dependency of KafkaMessagePublisher since we need to test the class method here
    @Autowired
    private KafkaMessagePublisher publisher;


    // this below method is to test whether we are able to send Customer object message to kafka topic via random port generated
    // and random bootstrap servers generated by docker each time application starts
    // test the sendEventsToTopic which sends custom object to kafka topic
    @Test
    public void testSendEventsToTopic(){
        // send customer object to kafka topic
        publisher.sendEventsToTopic(new Customer(34234,"test user", "test@gmail.com","234234"));
        await().pollInterval(Duration.ofSeconds(3)) // define poll interval of 3 seconds
                .atMost(10, TimeUnit.SECONDS).untilAsserted(() -> { // we will wait minimum of 10 seconds once message is pushed to topic
                    // assert statement can be written to check object from db
                });

    }


}
